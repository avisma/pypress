# button.py# Taken from John Zelle's book Python Programming 2nd edition#Uses John Zelle's graphics module.from graphics import *  # Imports the entire graphics module.class Button:        """A button is a labeled rectangle in a window. It is activated or    or deactivated with the 'activate()' and 'deactivate()' methods. The    'clicked(p)' method returns True if the button is active and 'p' is    inside of the button's boundaries."""        def __init__(self, window, center, width, height, buttonLabel):                """Creates a rectangular button, for example:    button1 = Button(window1, Point(0, 0), 10, 5, "quit")"""                w, h = width / 2.0, height / 2.0                x, y = center.getX(), center.getY()                self.xMax, self.xMin = x + w, x - w         self.yMax, self.yMin = y + h, y - h                 p1 = Point(self.xMin, self.yMin)                                         p2 = Point(self.xMax, self.yMax)                self.outline = Rectangle(p1, p2)          self.outline.setFill("light gray")        self.outline.draw(window)                         self.label = Text(center, buttonLabel)         self.label.draw(window)        self.activeColor = ""        self.inactiveColor = ""                self.deactivate()     def clicked(self, p):        """Returns True if  button is active and p is within its    boundaries."""        return (self.active and                self.xMin <= p.getX() <= self.xMax and                self.yMin <= p.getY() <= self.yMax)    def getLabel(self):        """Returns the label string of the button."""        return self.label.getText()    def activate(self):        """Sets button to 'active'"""        self.label.setFill("black")        self.outline.setWidth(2)        if self.activeColor != "":            self.outline.setFill(self.activeColor)        self.active = True    def deactivate(self):        """Sets button to 'inactive'"""        self.label.setFill("dark grey")        self.outline.setWidth(1)        if self.inactiveColor != "":            self.outline.setFill(self.inactiveColor)        self.active = False##############################################################################    def setActFill(self, colorStringOrTuple):        '''Sets background color of an active button, using a color string           i.e. 'dark grey' or a hex color string i.e. '#2a4f35'.'''        self.activeColor = colorStringOrTuple        if self.active:            self.outline.setFill(colorStringOrTuple)    def setInactFill(self, colorStringOrTuple):        '''Sets background color of an inactive button, using a color string           i.e. 'dark grey' or a hex color string i.e. '#2a4f35'.'''        self.inactiveColor = colorStringOrTuple        if not self.active:            self.outline.setFill(colorStringOrTuple)    def setFill(self, activeColor, inactiveColor): # included for ease of use.        '''Sets background colors of a button, using a color string           i.e. 'dark grey' or a hex color string i.e. '#2a4f35'.'''        self.activeColor = activeColor        if self.active:            self.outline.setFill(activeColor)        self.inactiveColor = inactiveColor        if not self.active:            self.outline.setFill(inactiveColor)    def undraw(self):        self.outline.undraw()        self.label.undraw()###############################################################################            def main_():    """Can be used to demonstrate this module."""    win = GraphWin()    win.setCoords(-100, -100, 100, 100)    activateButton = Button(win, Point(0, 75), 130, 20, "Activate Buttons")    activateButton.activate()    fancyButton = Button(win, Point(0, 25), 130, 20, "Fancify?")    deactivateButton = Button(win, Point(0, -25), 130, 20, "Deactivate Button")    quitButton = Button(win, Point(0, -75), 130, 20, "Close Window")    while True:        p = win.getMouse()                if activateButton.clicked(p) == True:            quitButton.activate()            deactivateButton.activate()            fancyButton.activate()        elif fancyButton.clicked(p) == True:            activateButton.setActFill("Light Green")            deactivateButton.setFill("turquoise", "sky blue")            quitButton.setFill("dark olive green", "dark sea green")            fancyButton.deactivate()                    elif deactivateButton.clicked(p) == True:            quitButton.deactivate()            fancyButton.deactivate()            deactivateButton.deactivate()        elif quitButton.clicked(p) == True:            quitButton.undraw()            win.getMouse()            win.close()            breakif __name__ == "__main__":    main_()