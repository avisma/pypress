# pypress.py# Designed by Ben Underwood and Justin Kim# A version of Letterpress for Python# Original game designed and published by atebitsfrom graphics import *import stringimport randomimport lib_button as buttondef drawWin():    win = GraphWin("pypress.py", 700, 600)    win.setCoords(0, 0, 700, 600)    return windef setAllActive(ButtonList):    for i in ButtonList:        i.activate()        i.setFill('light gray', 'light gray')def setAllInactive(ButtonList):    for i in ButtonList:        i.deactivate()        i.setFill('light gray', 'light gray')        def undrawAll(chosenLetterButtons):    try:        chosenLetterButtons[0:len(chosenLetterButtons) - 1].undraw##        for i in range(len(chosenLetterButtons)):##            chosenLetterButtons[i].undraw()    except AttributeError:        passdef turnSwitch():    global color    global lastColor        if color == "blue":        color = "red"        lastColor = "blue"    elif color == "red":        color = "blue"        lastColor = "red"def makeScore(chosenLetters):    letterList = []    for i in range(len(chosenLetters)):        letterList.append(chosenLetters[i])    return letterListdef isClicked(click, box):    boxClicked = None    global oldColor    print(oldColor)    totalButtonClicks = [0] * 25    wasClicked = [False] * 25    #global lastColor    #print(lastColor)    for i in range(25):        if box[i].clicked(click):            letter = box[i].getLabel()            box[i].deactivate()            oldColor[i] = lastColor            box[i].setFill(color, color)            boxClicked = i    if boxClicked == None:        letter = None    return letter, boxClickeddef addLetters(letter, boxClicked):    try:        if letters[boxClicked] != None:            print("Removing from 'letters'")            print(boxClicked)            letters[boxClicked] = None        else:            print("valueError... Redirecting...")            if color == 'blue':                try:                    if oldColor[boxClicked] == color:                        blueLetters.remove(letter)                        print("Blue clicked their own letter.")                    else:                        print("Removing from Red")                        redLetters.remove(letter)                        print("No more of this letter? "                              "removed letter from Red")                except ValueError:                    if letter in blueLetters:                        print("Never mind")                        blueLetters.remove(letter) # See below comment                        pass            elif color == 'red':                try:                    if oldColor[boxClicked] == color:                        redLetters.remove(letter)                        print("Red clicked their own letter.")                    else:                        print("Removing from Blue")                        blueLetters.remove(letter)                        print("No more of this letter? "                              'removed letter from Blue')                except ValueError:                    if letter in redLetters:                        print("Never mind")                        redLetters.remove(letter) #At this point, the                                            # letter has already been                                            # added to 'chosenLetters'.                                            # Removing the existing                                            # letter from the list                                            # prevents the program from                                            # duplicating the letter,                                            # as the letter will be                                            # re-added as part of the                                            # new word.                        pass            else: print('Neither team\n',letters)    except IndexError:        print("Index Error, Redirecting...")        print(letters)        print(len(letters))def drawBoard(win):    box = [""] * 25    letters = []    upLeft = Point(100, 500)    downRight = Point(150, 450)    width = 100# downRight.getX() - upLeft.getX()    height = 100# upLeft.getY() - downRight.getY()    center = Point(150, 50) ##Revert if needed##    for i in range(25): # Draw Buttons        box[i] = button.Button(win, center, width, height, str(box[i]))         if not i in [4, 9, 14, 19]:            if round(center.getX()) in [150, 350, 550]:                center.move(0, 100)            else:                center.move(0, -100)        else:            center.move(100, 0)                return boxdef initTiles(box, win):        for i in range(25): # Label buttons        letters.append(random.choice(string.ascii_uppercase))        box[i].label.setSize(20)        box[i].label.setText(letters[i])        box[i].activate()    submit = False    submitButton = button.Button(win, Point(650, 550), 70, 30, "submit!")    submitButton.activate()    return submit, submitButtondef main():    win = drawWin()        global letters    letters = []        box = drawBoard(win)    submit, submitButton = initTiles(box, win)    chosenLetters = []    drawChosenLetters = Text(Point(350, 550), chosenLetters) # Replaced with buttons    drawChosenLetters.setSize(20)    drawChosenLetters.draw(win)    resetButton = button.Button(win, Point(350, 515), 100, 20, "reset")    resetButton.activate()    global color    global lastColor    global oldColor    color = "blue"    lastColor = "light gray"    oldColor = [None] * 25        testCount = 0    submit = False    invalidText = Text(Point(650, 515), "Not a valid word!")    redLetters = []    blueLetters = []    chosenLetterButtons = [None] * 25        wordlist = open("wordlist.txt")    while (len(redLetters) + len(blueLetters)) < 25: # Game is not over        while True:            click = win.getMouse()                        if submitButton.clicked(click):                while None in chosenLetters:                    chosenLetters.remove(None)                if "".join(chosenLetters).lower() not in wordlist.read():                    invalidText.draw(win)                    print(chosenLetters)                                    else:                    submitButton.deactivate()                    print("Breaking...")                    break # loop exit            if resetButton.clicked(click):                chosenLetters = []                drawChosenLetters.setText(chosenLetters)                setAllActive(box)                            letter, boxClicked = isClicked(click, box)                        if letter != None:                                chosenLetters.append(letter) # = chosenLetters + letter # Adds letters to 'chosenLetters'                invalidText.undraw()                chosenLettersLeftBoundX = 350 - (50 * len(chosenLetters))                ##                for i in range(len(chosenLetters)):##                    print('Letters =', chosenLetters)##                    undrawAll(chosenLetterButtons)##                    #chosenLetterButtons[i] = button.Button(win, Point(0, 0), 0, 0, 0)##                    chosenLetterButtons[i] = button.Button(win, Point(chosenLettersLeftBoundX + (i * 50), 550), 50, 50, chosenLetters[i])##                    #chosenLetterButtons.append(letterButton)##                    chosenLetterButtons[i].activate()                addLetters(letter, boxClicked)##            else: # letter == None####                for i in range(len(chosenLetters)):##                    ##                    if chosenLetterButtons[i].clicked(click):##                        print("Removing", chosenLetters[i])##                        chosenLetters[i] = None##                        print("New List:\n", chosenLetters)##                        chosenLetterButtons[i].undraw()##                        chosenLetterButtons[i] = None                drawChosenLetters.setText(chosenLetters)##                chosenLettersLeftBoundX = 350 - (50 * len(chosenLetters))##                for i in range(len(chosenLetters)):##                    chosenLetterButtons = button.Button(win, Point(0, 0), 0, 0, 0)##                    chosenLetterButtons = button.Button(win, Point(chosenLettersLeftBoundX + (i * 50), 550), 50, 50, chosenLetters[i])##                    chosenLetterButtons.activate()        letterList = makeScore(chosenLetters)        if color == 'blue':             blueLetters = blueLetters + letterList        elif color == 'red':            redLetters = redLetters + letterList        #print(blueLetters, redLetters)                    turnSwitch()        chosenLetters = []        drawChosenLetters.setText(chosenLetters)        print("Switching Turns")        testCount = testCount + 1        submit = True        submitButton.activate()        setAllActive(box)    print("Finished!")    print(letters)    print(len(blueLetters), len(redLetters))    print(len(letters))    print("Exiting...")    win.getMouse()    win.close()if __name__ == "__main__":    main()